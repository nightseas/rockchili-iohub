// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/06/2018 10:28:33"
                                                                                
// Verilog Test Bench template for design : rockchili_iohub_top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module rockchili_iohub_top_vlg_tst();
// constants                                           
// general purpose registers
// test vector input registers
reg ext_clk;
reg [2:0] int_ext;
reg [3:0] pid_strap;
reg [1:0] psu_prsnt;
reg [14:0] pwr_good;
reg rst_n;
reg spi_cs_n;
reg spi_mosi;
reg spi_sclk;
// wires                                               
wire int_sys;
wire [3:0]  led_ctrl;
wire led_err;
wire led_hb;
wire led_pwr;
wire pwr_allgood;
wire [11:0]  pwr_en;
wire spi_miso;

//wire [3:0] pwr_ctrl_fsm;

integer test_cnt;

// assign statements (if any)                          
rockchili_iohub_top i1 (
// port map - connection between master ports and signals/registers 
	// For Simulation Only
	// .pwr_ctrl_fsm(pwr_ctrl_fsm),
	
	.ext_clk(ext_clk),
	.int_ext(int_ext),
	.int_sys(int_sys),
	.led_ctrl(led_ctrl),
	.led_err(led_err),
	.led_hb(led_hb),
	.led_pwr(led_pwr),
	.pid_strap(pid_strap),
	.psu_prsnt(psu_prsnt),
	.pwr_allgood(pwr_allgood),
	.pwr_en(pwr_en),
	.pwr_good(pwr_good),
	.rst_n(rst_n),
	.spi_cs_n(spi_cs_n),
	.spi_miso(spi_miso),
	.spi_mosi(spi_mosi),
	.spi_sclk(spi_sclk)
);



parameter F_SYSCLK = 25_000_000;
parameter T_SYSCLK = 1_000_000_000/F_SYSCLK;

parameter F_SPICLK = 1_000_000;
parameter T_SPICLK = 1_000_000_000/F_SPICLK;

parameter SPI_WR   = 8'h00;
parameter SPI_RD   = 8'h80;

// SPI Data Transfer Function
task test_func_spi_transfer;
	input[7:0] addr;
	input[15:0] wdata;
	integer bit_cnt;
	reg[15:0] rdata;
begin
	spi_mosi = 1'bz;
	bit_cnt = 0;
	#(T_SPICLK) spi_cs_n = 0;
	
	if(!addr[7])
		$display("[SPI] Writing addr 0x%02X with data 0x%04X...", addr[6:0], wdata);
	
	while(bit_cnt < 8) begin
		spi_mosi = addr[7-bit_cnt];
		#(T_SPICLK*0.5) spi_sclk = 1;
		#(T_SPICLK*0.5) spi_sclk = 0;
		bit_cnt = bit_cnt + 1;
	end
	
	bit_cnt = 0;
	while(bit_cnt < 16) begin
		spi_mosi = wdata[15-bit_cnt];
		#(T_SPICLK*0.5) spi_sclk = 1;
		rdata[15-bit_cnt] = spi_miso;
		#(T_SPICLK*0.5) spi_sclk = 0;
		bit_cnt = bit_cnt + 1;
	end
	
	if(addr[7])
		$display("[SPI] Read addr 0x%02X = 0x%04X.", addr[6:0], rdata);
	
	#(T_SPICLK) spi_cs_n = 1;
	spi_mosi = 1'bz;
end
endtask

// PLD Reset
initial                                                
begin 
	rst_n = 0;
	pid_strap = 4'b0101;
	#(T_SYSCLK*5) rst_n = 1;
	//#(T_SYSCLK*10) pid_strap = 4'bzzzz;
end    


// PLD System Clock 
initial                                                 
begin               
	ext_clk = 1;
	while(1)
		#(T_SYSCLK*0.5) ext_clk = ~ext_clk; 
end

// Reserved
initial
begin
	int_ext = 3'b111;
	pid_strap = 4'b1111;
	psu_prsnt = 2'b11;
	pwr_good = 15'h0;
	spi_cs_n = 1;
	spi_mosi = 0;
	spi_sclk = 0;
	
	test_cnt = 0;
	
	// Product Info Register (Read only test)
	#(T_SPICLK*5) test_func_spi_transfer(SPI_RD | 8'h00, 16'h0);
	#(T_SPICLK*5) test_func_spi_transfer(SPI_WR | 8'h00, 16'h1234);
	#(T_SPICLK*5) test_func_spi_transfer(SPI_RD | 8'h00, 16'h0);
	
	// Product Test Register
	for(test_cnt = 1; test_cnt < 16'hFFFF; test_cnt = test_cnt + 1) begin
		#(T_SPICLK*5) test_func_spi_transfer(SPI_WR | 8'h02, test_cnt);
		#(T_SPICLK*5) test_func_spi_transfer(SPI_RD | 8'h02, test_cnt);
	end
	
end

                                                   
endmodule

